version: "3.3"

volumes:
  prometheus: {}
  grafana: {}
  alertmanager: {}

configs:
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml
  prom_conf:
    file: ./prometheus/conf/prometheus.yml
  alert_conf:
    file: ./alertmanager/alertmanager.yml
  alert_tmpl:
    file: ./alertmanager/notifications.tmpl
  gf_ds:
    file: ./grafana/datasources/prometheus.yml
  gf_dbs:
    file: ./grafana/dashboards/swarmprom_dashboards.yml
  gf_db1:
    file: ./grafana/dashboards/swarmprom-nodes-dash.json
  gf_db2:
    file: ./grafana/dashboards/swarmprom-prometheus-dash.json
  gf_db3:
    file: ./grafana/dashboards/swarmprom-services-dash.json

services:

  cadvisor:
    image: {{.Cadvisor}}
    networks:
      - mon
    command: -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: {{.Grafana}}
    networks:
      - mon
    environment:
      - GF_SECURITY_ADMIN_USER={{.GrafanaUser}}
      - GF_SECURITY_ADMIN_PASSWORD={{.GrafanaPassword}}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http{{if .ACMEEnabled}}s{{end}}://{{if .Domain}}{{.Domain}}{{else}}localhost{{end}}/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana:/var/lib/grafana
    configs:
      - source: gf_ds
        target: /etc/grafana/provisioning/datasources/prometheus.yml
      - source: gf_dbs
        target: /etc/grafana/provisioning/dashboards/swarmprom_dashboards.yml
      - source: gf_db1
        target: /etc/grafana/provisioning/dashboards/swarmprom-nodes-dash.json
      - source: gf_db2
        target: /etc/grafana/provisioning/dashboards/swarmprom-prometheus-dash.json
      - source: gf_db3
        target: /etc/grafana/provisioning/dashboards/swarmprom-services-dash.json
    depends_on:
      - prometheus
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=PathPrefix(\`/grafana\`)" 
        - "traefik.http.routers.grafana.priority=300"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"    
        {{if .ACMEEnabled}}
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=le"
        - "traefik.http.routers.grafana.tls.domains[0].main={{.Domain}}"
        {{end}}
        - "traefik.docker.network=mon"
        - "traefik.docker.lbswarm=true"
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  alertmanager:
    image: {{.Alertmanager}}
    networks:
      - mon
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http{{if .ACMEEnabled}}s{{end}}://{{if .Domain}}{{.Domain}}{{else}}localhost{{end}}/alertmanager'
      - '--web.route-prefix=/alertmanager'
      - '--log.level=debug'
    volumes:
      - alertmanager:/alertmanager
    configs:
      - source: alert_conf
        target: /etc/alertmanager/alertmanager.yml
      - source: alert_tmpl
        target: /etc/alertmanager/notifications.tmpl
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.alertmgr.rule=PathPrefix(\`/alertmanager\`)" 
        - "traefik.http.routers.alertmgr.priority=300"
        - "traefik.http.services.alertmgr.loadbalancer.server.port=9093"
        - "traefik.http.routers.alertmgr.middlewares=auth_am"
        - "traefik.http.middlewares.auth_am.basicauth.users={{.AlertManagerBasicAuth}}"
        - "traefik.http.middlewares.auth_am.basicauth.realm=alertmgr"
        - "traefik.http.middlewares.auth_am.basicauth.removeheader=true"
        - "traefik.docker.network=mon"
        {{if .ACMEEnabled}}
        - "traefik.http.routers.alertmgr.entrypoints=websecure"
        - "traefik.http.routers.alertmgr.tls=true"
        - "traefik.http.routers.alertmgr.tls.certresolver=le"
        - "traefik.http.routers.alertmgr.tls.domains[0].main={{.Domain}}"
        {{end}}
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  node-exporter:
    image: {{.NodeExporter}}
    networks:
      - mon
    environment:
      - NODE_ID={{"{{"}}.Node.Hostname{{"}}"}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--no-collector.ipvs'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/vagrant|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    image: {{.Prometheus}}
    networks:
      - mon
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=24h'
      - '--web.external-url=http{{if .ACMEEnabled}}s{{end}}://{{if .Domain}}{{.Domain}}{{else}}localhost{{end}}/prometheus'
      - '--web.route-prefix=/prometheus'
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
      - source: prom_conf
        target: /etc/prometheus/prometheus.yml
    depends_on:
      - cadvisor
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.prometheus == true
      labels:
        - traefik.enable=true
        - "traefik.http.routers.prometheus.rule=PathPrefix(\`/prometheus\`)" 
        - "traefik.http.routers.prometheus.priority=300"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.http.routers.prometheus.middlewares=auth_pm"
        - "traefik.http.middlewares.auth_pm.basicauth.users={{.PrometheusBasicAuth}}"
        - "traefik.http.middlewares.auth_pm.basicauth.removeheader=true"
        - "traefik.http.middlewares.auth_pm.basicauth.realm=prometheus"
        - "traefik.docker.lbswarm=true"
        - "traefik.docker.network=mon"
        {{if .ACMEEnabled}}
        - "traefik.http.routers.prometheus.entrypoints=websecure"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.routers.prometheus.tls.certresolver=le"
        - "traefik.http.routers.prometheus.tls.domains[0].main={{.Domain}}"
        {{end}}
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 128M

networks:
  mon:
    external: true