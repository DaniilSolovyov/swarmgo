// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// resources/traefik.yml
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesTraefikYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcd\x8e\xe2\x46\x10\xbe\x23\xf1\x0e\x2d\x5f\xf6\xb2\x36\x8c\x86\x95\x50\x6b\xbd\xd2\x84\x65\x13\x24\xc2\x44\xb3\x93\x33\x2a\xba\x0b\xd3\xa2\xdd\x65\x75\xb7\x61\x50\x94\x53\x9e\x30\x6f\x14\x35\x36\x60\xb0\x51\xa2\x51\xf6\x46\x7d\xf5\xd5\xd7\x45\xfd\x79\x87\xd6\x29\x32\x9c\x7d\x78\x4c\x3e\x7d\xe8\xf7\x1c\xda\x9d\x12\xe8\x78\xbf\xc7\x98\xb7\x80\x6b\xb5\x5d\x2a\xa3\xfc\x11\x60\x4c\xe5\x90\x21\x67\x9f\x6b\x17\xab\xe3\xbf\x54\x5e\x41\x79\x0e\x46\xd6\xdc\x98\x45\xce\x93\x45\x41\x66\xad\xb2\xe8\x0c\xc6\x31\x14\xaa\x69\xa2\xf1\xf6\x50\x90\x32\xde\xa5\x0b\xc8\x91\x6f\xbc\x2f\xd8\x93\x94\x16\x9d\xe3\x7c\x3c\x64\x2f\x28\x95\x45\xe1\x93\x69\xa0\xfe\x16\xa8\x47\x92\xfb\x57\x19\x77\xd1\x19\x8d\x1e\xd9\xeb\xfc\x7b\x33\x44\xe2\x1a\x4a\xed\xff\xfe\xab\x11\x1a\xa2\x3e\xb6\xc4\x41\xe4\x78\x6b\x27\xe1\xef\x41\x86\x69\x5d\x8d\x41\x00\x07\x20\x04\x95\xc6\xb7\xc8\x78\x4e\x3d\xed\x54\x4f\x02\x3a\xd9\x80\xd6\x68\xb2\x16\xbd\xc5\x26\xf3\x0b\x39\xff\x52\xea\xf0\x7c\xd9\xce\x8d\xcc\x57\x0c\xcd\x48\xd7\xa0\x5d\xdb\x8d\x39\x28\x9d\x7e\x3e\x50\x69\xd9\xf1\xf7\x97\xab\xba\x90\xd8\xa2\x6d\x23\x89\xdb\x83\xcd\x7f\x25\x89\x1d\x3e\x49\x39\x28\x53\x6b\x56\x46\x87\x68\xb2\x07\x2f\x36\x4d\x5c\x90\x71\xa5\x6e\x23\x09\x1a\x79\xec\x49\x5a\xd9\x7c\xfc\x69\x38\xec\xa0\x15\x16\xd7\xea\xed\xd4\x84\x9a\x60\xd0\xef\xc9\x6e\xdd\x79\x16\x6b\x77\x65\x4a\x2c\x34\x1d\x6a\x1f\x63\x16\x9d\x07\xeb\x97\x05\x69\x25\x2e\x70\x18\x68\x23\x95\x3f\x2e\x08\x99\x78\x0d\x4a\x97\x16\xcf\x12\x68\xa4\x5b\x92\x39\x3f\x51\xe5\xd3\xd8\x9c\xff\xb4\x34\x1d\x42\xcd\xc5\x6b\x8b\x77\xec\xd9\x0f\x2a\xe2\x91\xa0\x29\x9b\xe3\x0e\x75\xaa\xcc\x9a\x6a\xc7\x8e\x74\x99\xe3\xa5\xb8\x83\x1d\xd8\x81\x2d\xcd\xe0\x34\x26\x24\xb6\xbc\x0b\xbc\xd3\x9c\x3d\xae\x32\xf0\xb8\x87\x43\x67\xbb\x0a\xb2\xbe\xd1\x49\xb0\x19\x7a\xce\xc6\xc3\x53\xa3\x8a\x72\xa5\x95\xdb\xa0\x6c\x82\x39\x49\xe4\x6c\x43\xce\xdf\x06\x8e\x46\x8f\x1d\x91\x0d\xf4\x7e\xe8\x78\x78\xe7\xd5\xfb\xef\xde\xcc\x5a\xe5\xce\x34\xad\x40\x9f\x95\x34\x08\xcc\xd1\xf8\xeb\xd1\x73\xde\x42\x38\x49\x0d\x34\x66\x86\x24\x26\x96\x34\xb2\x34\x65\x39\x18\xc8\xd0\x9e\xfc\x65\x21\xc1\xe3\xb2\x3a\xb8\x8d\xa8\x02\x6c\x38\x2b\x5a\xb9\x9c\xb3\x87\x0b\x2e\x51\xc3\x81\xb3\x87\xa1\x7b\xff\x26\xd4\x63\x75\x35\xe9\x5d\xb3\xca\x20\x43\xe3\x59\x1c\xbe\x30\x68\x59\xbc\x22\xf2\xe1\x0f\x16\x31\xbe\x15\x28\x7c\xfa\xd0\x3d\x5a\x95\x56\x2c\xc1\x03\x1f\x54\xc6\x20\x18\x95\x1f\xcd\x4e\x59\x32\x8d\xda\xc5\x6c\xf2\xbc\xf8\xfe\xfb\x7c\x39\x7f\x9e\x3c\xcd\x97\x93\xe7\xc5\xb7\xd9\xcf\xe9\x1f\x51\x88\x11\x68\x3c\xda\x88\x47\xa5\xf1\x4a\xeb\xe8\x63\x54\x65\x13\xf1\x70\x42\xff\xbc\x11\xf8\x69\xb6\xf8\xba\x9c\x2d\x5e\xa7\x2f\xdf\x9e\x26\xd3\x14\xfd\x66\x78\xc3\x98\xcc\x67\xd3\xc5\x6b\x27\xa7\x75\x61\x0a\xad\x04\xb8\x46\xf9\xff\xaf\xa6\xbf\xe7\x78\xdd\xbf\x8e\xfd\xde\x95\xef\xfa\x90\xe1\x9b\x47\x6b\x40\x73\x16\xea\x15\xb0\xcb\xe2\xde\xa1\xf4\x7b\xcd\x86\x36\x9b\x59\x67\x12\x3e\xd4\x35\xfe\x4f\x00\x00\x00\xff\xff\xdd\xd7\xd1\x13\x8d\x08\x00\x00")

func resourcesTraefikYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTraefikYml,
		"resources/traefik.yml",
	)
}

func resourcesTraefikYml() (*asset, error) {
	bytes, err := resourcesTraefikYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/traefik.yml", size: 2189, mode: os.FileMode(438), modTime: time.Unix(1538747061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/traefik.yml": resourcesTraefikYml,
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
